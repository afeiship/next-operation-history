{"version":3,"sources":["next-operation-history.js"],"names":[],"mappingsfile":"next-operation-history.js","sourcesContent":["(function() {\n  var global = global || this || window || Function('return this')();\n  var nx = global.nx || require('@feizheng/next-js-core2');\n  var nxRemove = nx.remove || require('@feizheng/next-remove');\n  var nxHash = nx.hash || require('@feizheng/next-hash');\n  var NxLocalStorage = nx.LocalStorage || require('@feizheng/next-local-storage');\n  var NxSessionStorage = nx.SessionStorage || require('@feizheng/next-session-storage');\n\n  var DEFAULT_OPTIONS = {\n    max: 10,\n    engine: 'local',\n    prefix: 'nx',\n    index: -1,\n    data: []\n  };\n\n  var NxOperationHistory = nx.declare('nx.OperationHistory', {\n    properties: {\n      index: {\n        set: function(inValue) {\n          this.store.set('index', inValue);\n        },\n        get: function() {\n          return this.store.get('index');\n        }\n      },\n      data: {\n        set: function(inValue) {\n          this.store.set('data', inValue);\n        },\n        get: function() {\n          return this.store.get('data') || [];\n        }\n      },\n      length: function() {\n        return this.data.length;\n      },\n      next: function() {\n        var current = this.index;\n        return current < this.options.max && current >= 0 && current < this.last();\n      },\n      prev: function() {\n        return this.index > 0;\n      }\n    },\n    methods: {\n      init: function(inOptions) {\n        var options = (this.options = nx.mix(null, DEFAULT_OPTIONS, inOptions));\n        var prefix = options.prefix + '__operation_history';\n        this.store =\n          options.engine === 'local'\n            ? new NxLocalStorage(prefix)\n            : new NxSessionStorage(prefix);\n\n        this.reset();\n      },\n      reset: function() {\n        this.index = this.options.index;\n        this.data = this.options.data;\n      },\n      flush: function(inData) {\n        this.data = inData.slice(-this.options.max);\n        this.index = this.last();\n      },\n      last: function() {\n        return this.length - 1;\n      },\n      at: function(inIndex) {\n        var index = inIndex || this.index;\n        return this.data[index] || null;\n      },\n      get: function(inId) {\n        var data = this.data;\n        var item = data.find(function(value) {\n          return value.id === inId;\n        });\n        return item;\n      },\n      gets: function() {\n        return this.data;\n      },\n      forward: function() {\n        var current = this.index;\n        if (this.next) {\n          this.index = current + 1;\n        }\n      },\n      back: function() {\n        var current = this.index;\n        if (this.prev) {\n          this.index = current - 1;\n        }\n      },\n      go: function(inIndex) {\n        if (inIndex >= 0) {\n          var index = inIndex >= this.options.max ? this.last() : inIndex;\n          this.index = index;\n        } else {\n          var index = this.index + inIndex;\n          this.index = index >= 0 ? index : 0;\n        }\n      },\n      add: function(inData) {\n        var data = this.data;\n        data.push({ id: nxHash(inData), data: inData });\n        this.flush(data);\n      },\n      del: function(inId) {\n        var data = nxRemove(this.data, function(_, value) {\n          return value.id === inId;\n        });\n        this.flush(data);\n      },\n      push: function(inData) {\n        var shouldAdd = this.shouldAdd(inData);\n        if (shouldAdd) {\n          this.add(inData);\n        }\n        return shouldAdd;\n      },\n      replace: function(inData) {\n        var data = this.data;\n        var shouldAdd = this.shouldAdd(inData);\n        if (shouldAdd) {\n          if (data.length > 0) {\n            data[data.length - 1].data = inData;\n            this.flush(data);\n          } else {\n            this.push(inData);\n          }\n        }\n        return shouldAdd;\n      },\n      shouldAdd: function(inData) {\n        var last = this.data[this.last()];\n        return !last || nxHash(last.data) !== nxHash(inData);\n      }\n    }\n  });\n\n  if (typeof module !== 'undefined' && module.exports) {\n    module.exports = NxOperationHistory;\n  }\n})();\n"]}